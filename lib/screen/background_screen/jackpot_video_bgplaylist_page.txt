
// import 'dart:async';
// import 'package:flutter/material.dart';
// import 'package:flutter_bloc/flutter_bloc.dart';
// import 'package:media_kit/media_kit.dart';
// import 'package:media_kit_video/media_kit_video.dart';
// import 'package:playtech_transmitter_app/service/config_custom.dart';
// import 'package:playtech_transmitter_app/service/widget/circlar_progress.dart';
// import 'package:playtech_transmitter_app/screen/background_screen/jackpot_screen_page.dart';
// import 'package:playtech_transmitter_app/screen/background_screen/bloc_socket_time/jackpot_bloc2.dart';
// import 'package:playtech_transmitter_app/screen/background_screen/bloc_socket_time/jackpot_event2.dart';

// class JackpotBackgroundVidPlayListPage extends StatefulWidget {
//   const JackpotBackgroundVidPlayListPage({super.key});

//   @override
//   _JackpotBackgroundVidPlayListPageState createState() => _JackpotBackgroundVidPlayListPageState();
// }

// class _JackpotBackgroundVidPlayListPageState extends State<JackpotBackgroundVidPlayListPage>
//     with SingleTickerProviderStateMixin {
//   late final Player _player;
//   late final VideoController _controller;
//   late AnimationController _fadeController;
//   late Animation<double> _fadeAnimation;
//   Size? _lastScreenSize;
//   bool _isSwitching = false;
//   Timer? _switchTimer;
//   int _currentIndex = 0;

//   @override
//   void initState() {
//     super.initState();
//     debugPrint('Initializing JackpotBackgroundVidPlayListPage');
//     MediaKit.ensureInitialized();

//     // Initialize fade animation
//     _fadeController = AnimationController(
//       duration: Duration(milliseconds: ConfigCustom.switchBetweeScreenDuration),
//       vsync: this,
//     );
//     _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
//       CurvedAnimation(parent: _fadeController, curve: Curves.easeIn),
//     );

//     // Initialize player and controller
//     _player = Player();
//     _controller = VideoController(
//       _player,
//       configuration: const VideoControllerConfiguration(
//         enableHardwareAcceleration: true,
//       ),
//     );

//     // Load playlist and start timer
//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       _loadPlaylist();
//       _startSwitchTimer();
//     });

//     // Handle errors
//     _player.stream.error.listen((error) {
//       debugPrint('Player error: $error');
//       if (mounted) {
//         Future.delayed(const Duration(seconds: 1), () {
//           if (mounted) {
//             _loadPlaylist();
//             _startSwitchTimer();
//           }
//         });
//       }
//     });
//   }

//   Future<void> _loadPlaylist() async {
//     if (_isSwitching) return;
//     _isSwitching = true;
//     try {
//       debugPrint('Loading playlist with videos: ${ConfigCustom.videoBg}, ${ConfigCustom.videoBg2}');
//       _fadeController.reset();
//       await _player.stop();
//       await _player.open(
//         Playlist([
//           Media('asset://${ConfigCustom.videoBg}'),
//           Media('asset://${ConfigCustom.videoBg2}'),
//         ]),
//         play: false,
//       );
//       await _player.setPlaylistMode(PlaylistMode.loop);
//       _currentIndex = 0;
//       await _player.jump(0); // Start with video 1
//       await _player.play();
//       if (mounted) {
//         _fadeController.forward();
//       }
//       debugPrint('Playlist loaded, playing index: $_currentIndex');
//     } catch (error, stackTrace) {
//       debugPrint('Error loading playlist: $error\n$stackTrace');
//       Future.delayed(const Duration(seconds: 1), () {
//         if (mounted) {
//           _loadPlaylist();
//         }
//       });
//     } finally {
//       _isSwitching = false;
//     }
//   }

//   void _startSwitchTimer() {
//     _switchTimer?.cancel();
//     _switchTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
//       if (!mounted) {
//         timer.cancel();
//         return;
//       }
//       _switchVideo();
//     });
//   }

//   Future<void> _switchVideo() async {
//     if (_isSwitching) return;
//     _isSwitching = true;
//     try {
//       final nextIndex = (_currentIndex + 1) % 2;
//       debugPrint('Switching to index: $nextIndex');
//       _fadeController.reset();
//       await _player.stop();
//       await _player.jump(nextIndex);
//       _currentIndex = nextIndex;
//       await _player.play();
//       if (mounted) {
//         _fadeController.forward();
//       }
//       debugPrint('Switched to index: $nextIndex');
//     } catch (error, stackTrace) {
//       debugPrint('Error switching video: $error\n$stackTrace');
//       Future.delayed(const Duration(seconds: 1), () {
//         if (mounted) {
//           _loadPlaylist();
//           _startSwitchTimer();
//         }
//       });
//     } finally {
//       _isSwitching = false;
//     }
//   }

//   @override
//   void dispose() {
//     debugPrint('Disposing JackpotBackgroundVidPlayListPage');
//     _switchTimer?.cancel();
//     _player.stop();
//     _player.dispose();
//     _fadeController.dispose();
//     super.dispose();
//   }

//   @override
//   void didChangeDependencies() {
//     super.didChangeDependencies();
//     final jackpotState = context.read<JackpotBloc2>().state;
//     // debugPrint('Jackpot state: $jackpotState');
//     if (jackpotState is JackpotHitReceived) {
//       _player.pause();
//       _switchTimer?.cancel();
//     } else if (!_player.state.playing && !_isSwitching) {
//       _player.play();
//       if (_switchTimer == null || !_switchTimer!.isActive) {
//         _startSwitchTimer();
//       }
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     final screenSize = MediaQuery.of(context).size;
//     if (_lastScreenSize != null &&
//         (_lastScreenSize!.width - screenSize.width).abs() < 1.0 &&
//         (_lastScreenSize!.height - screenSize.height).abs() < 1.0) {
//       debugPrint('Screen size unchanged, skipping layout rebuild');
//     } else {
//       _lastScreenSize = screenSize;
//       debugPrint('Screen size updated: ${screenSize.width}x${screenSize.height}');
//     }

//     return Center(
//       child: AspectRatio(
//         aspectRatio: ConfigCustom.fixWidth / ConfigCustom.fixHeight,
//         child: Stack(
//           fit: StackFit.expand,
//           children: [
//             RepaintBoundary(
//               child: FadeTransition(
//                 opacity: _fadeAnimation,
//                 child: Video(
//                   fill: Colors.transparent,
//                   controls: (state) => Container(),
//                   controller: _controller,
//                   fit: BoxFit.contain,
//                   width: ConfigCustom.fixWidth,
//                   height: ConfigCustom.fixHeight,
//                 ),
//               ),
//             ),
//             RepaintBoundary(child: JackpotDisplayScreen()),
//           ],
//         ),
//       ),
//     );
//   }
// }
